  .tables
  .headers on
  select * from products;

id|created_at|name|price|on_sale
1|2013-04-01 20:09:41.969902|Teddy Bear|17.99|f
2|2013-04-01 20:09:41.972179|Lonely Pillow|78.82|t
3|2013-04-01 20:09:41.973999|Cat Ears|99.99|f
4|2013-04-01 20:09:41.975612|The Ruby Programming Language|19.99|t
5|2013-04-01 20:09:41.977249|Silicon Valley Monopoly|10.99|t
6|2013-04-01 20:09:41.978579|Card Against Humanity|25.0|f
7|2013-04-01 20:09:41.980280|Brown Leather Boots|82.0|t
8|2013-04-01 20:09:41.981864|Hoodie|25.0|t
9|2013-04-01 20:09:41.983386|Set of 12 Mason Jars|6.22|f
10|2013-04-01 20:09:41.984861|Set of silverware|22.99|t

1. Selects the names of all products that are not on sale.
  select * from products where on_sale = 'f';
id|created_at|name|price|on_sale
1|2013-04-01 20:09:41.969902|Teddy Bear|17.99|f
3|2013-04-01 20:09:41.973999|Cat Ears|99.99|f
6|2013-04-01 20:09:41.978579|Card Against Humanity|25.0|f
9|2013-04-01 20:09:41.983386|Set of 12 Mason Jars|6.22|f

2. Selects the names of all products that cost less than £20.
  select * from products where price < 20.00
id|created_at|name|price|on_sale
1|2013-04-01 20:09:41.969902|Teddy Bear|17.99|f
4|2013-04-01 20:09:41.975612|The Ruby Programming Language|19.99|t
5|2013-04-01 20:09:41.977249|Silicon Valley Monopoly|10.99|t
9|2013-04-01 20:09:41.983386|Set of 12 Mason Jars|6.22|f

3. Selects the name and price of the most expensive product.
  select name, price from products where price = (select max(price) from products);
name|price
Cat Ears|99.99

4. Selects the name and price of the second most expensive product.
  select name, price from products where price = (select max(price) from products where price < (select max(price)from products));
name|price
Brown Leather Boots|82.0

5. Selects the name and price of the least expensive product.
  select name, price from products where price = (select min(price) from products);
name|price
Set of 12 Mason Jars|6.22

6. Selects the names and prices of all products, ordered by price in descending order.
  select name, price from products order by price;
name|price
Set of 12 Mason Jars|6.22
Silicon Valley Monopoly|10.99
Teddy Bear|17.99
The Ruby Programming Language|19.99
Set of silverware|22.99
Card Against Humanity|25.0
Hoodie|25.0
Lonely Pillow|78.82
Brown Leather Boots|82.0
Cat Ears|99.99

7. Selects the average price of all products.
  select avg(price) from products;
avg(price)
38.899

8. Selects the sum of the price of all products.
  select sum(price) from products;
sum(price)
388.99

9. Selects the sum of the price of all products whose prices is less than £20.
  select sum(price) from products where price < 20.00;
sum(price)
55.19

10. Selects the id of the user with your name.
  select * from users where name = 'James White';
  -
  insert into users (name) values ('James White');
  select * from users where name = 'James White';
id|created_at|name
15||James White

11. Selects the names of all users whose names start with the letter "J".
  select name from users where name like "J%";
name
Jon Rogers
James Gotsell
James White

12. Selects the number of users whose first names are "Spencer".
  select count(name) from users where name like "Spencer%";
count(name)
1

13. Selects the number of users who want a "Teddy Bear".
  select count(wishlists.user_id) from wishlists INNER JOIN products ON products.id = wishlists.product_id where products.name = 'Teddy Bear';
count(wishlists.user_id)
6

14. Selects the count of items on the wishlish of the user with your name.
  select count(wishlists.product_id) from wishlists INNER JOIN users on users.id = wishlists.user_id where users.name = 'ALex Chin';
count(wishlists.product_id)
1  (for the puposes of this I am ALex Chin)

15. Selects the count and name of all products on the wishlist, ordered by count in descending order.
  select count(*), products.name from wishlists inner join products on products.id = wishlists.product_id group by products.name order by count(products.name) desc;
count(*)|name
17|Hoodie
16|Card Against Humanity
15|Cat Ears
9|The Ruby Programming Language
6|Teddy Bear
5|Silicon Valley Monopoly
4|Brown Leather Boots
2|Lonely Pillow
2|Set of 12 Mason Jars

16. Selects the count and name of all products that are not on sale on the wishlist, ordered by count in descending order.
  select count(*), products.name from wishlists inner join products on products.id = wishlists.product_id where products.on_sale = 'f' group by products.name order by count(products.name) desc;
count(*)|name
16|Card Against Humanity
15|Cat Ears
6|Teddy Bear
2|Set of 12 Mason Jar

17. Inserts a user with the name "Jonathan Anderson" into the users table. Ensure the created_at column is set to the current time.
    insert into users (name, created_at) values ('Jonathan Anderson', CURRENT_TIMESTAMP);
    select * from users;                                                     
id|created_at|name
1|2013-04-01 20:09:41.926399|Jon Rogers
2|2013-04-01 20:09:41.932863|James Gotsell
3|2013-04-01 20:09:41.934730|Erica Porter
4|2013-04-01 20:09:41.936167|Christabel Samuels
5|2013-04-01 20:09:41.937655|Dani Zraikat
6|2013-04-01 20:09:41.938977|Rane Gowan
7|2013-04-01 20:09:41.940520|Hassan Mohammadi
8|2013-04-01 20:09:41.942043|Cheryl Wee
9|2013-04-01 20:09:41.943542|Tyrone Compton
10|2013-04-01 20:09:41.945032|Filippo Matoso
11|2013-04-01 20:09:41.946512|Spencer Meyer
12|2013-04-01 20:09:41.947799|Elena Sanna
13|2013-04-01 20:09:41.949360|Gerry Mathe
14|2013-04-01 20:09:41.951026|ALex Chin
15||James White
16|NOW()|Jonathan Anderson
17|2015-09-03 18:59:43|Jonathan Anderson

CLEANUP:
  delete from users where created_at = 'NOW()';

18. Selects the id of the user with the name "Jonathan Anderson"?
  select id from users where name="Jonathan Anderson";
id
17

19. Inserts a wishlist entry for the user with the name "Jonathan Anderson" for the product "The Ruby Programming Language".
  INSERT INTO wishlists (created_at, user_id, product_id) VALUES (CURRENT_TIMESTAMP, (select id from users where name = 'Jonathan Anderson'), (select id from products where name = 'The Ruby Programming Language'));
  
  select * from wishlists;
id|created_at|user_id|product_id
1|2013-04-01 20:09:41.992086|13|1
2|2013-04-01 20:09:41.994331|2|1
3|2013-04-01 20:09:41.996116|8|1
4|2013-04-01 20:09:41.997623|3|1
5|2013-04-01 20:09:41.999175|14|1
6|2013-04-01 20:09:42.000721|12|1
7|2013-04-01 20:09:43.003729|9|2
8|2013-04-01 20:09:43.007691|11|2
9|2013-04-01 20:09:44.011114|7|3
10|2013-04-01 20:09:44.014956|5|3
11|2013-04-01 20:09:44.016846|1|3
12|2013-04-01 20:09:44.018566|4|3
13|2013-04-01 20:09:44.020181|12|3
14|2013-04-01 20:09:44.021561|2|3
15|2013-04-01 20:09:44.023068|8|3
16|2013-04-01 20:09:44.024684|3|3
17|2013-04-01 20:09:44.026332|12|3
18|2013-04-01 20:09:44.027857|5|3
19|2013-04-01 20:09:44.029529|11|3
20|2013-04-01 20:09:44.031009|7|3
21|2013-04-01 20:09:44.032579|4|3
22|2013-04-01 20:09:44.034127|7|3
23|2013-04-01 20:09:44.035596|6|3
24|2013-04-01 20:09:45.037887|4|4
25|2013-04-01 20:09:45.042297|12|4
26|2013-04-01 20:09:45.044506|1|4
27|2013-04-01 20:09:45.046527|11|4
28|2013-04-01 20:09:45.048236|8|4
29|2013-04-01 20:09:45.049798|9|4
30|2013-04-01 20:09:45.051640|5|4
31|2013-04-01 20:09:45.053431|7|4
32|2013-04-01 20:09:45.055203|9|4
33|2013-04-01 20:09:46.058509|12|5
34|2013-04-01 20:09:46.062683|9|5
35|2013-04-01 20:09:46.064941|11|5
36|2013-04-01 20:09:46.066884|10|5
37|2013-04-01 20:09:46.068675|6|5
38|2013-04-01 20:09:47.071678|12|6
39|2013-04-01 20:09:47.075914|5|6
40|2013-04-01 20:09:47.078063|9|6
41|2013-04-01 20:09:47.079884|8|6
42|2013-04-01 20:09:47.081674|6|6
43|2013-04-01 20:09:47.083447|7|6
44|2013-04-01 20:09:47.085369|6|6
45|2013-04-01 20:09:47.087102|12|6
46|2013-04-01 20:09:47.088755|13|6
47|2013-04-01 20:09:47.090416|2|6
48|2013-04-01 20:09:47.091758|3|6
49|2013-04-01 20:09:47.093379|5|6
50|2013-04-01 20:09:47.095009|13|6
51|2013-04-01 20:09:47.096655|10|6
52|2013-04-01 20:09:47.098127|4|6
53|2013-04-01 20:09:47.099624|9|6
54|2013-04-01 20:09:48.102795|10|7
55|2013-04-01 20:09:48.106218|7|7
56|2013-04-01 20:09:48.108471|5|7
57|2013-04-01 20:09:48.110421|4|7
58|2013-04-01 20:09:49.113368|5|8
59|2013-04-01 20:09:49.116253|2|8
60|2013-04-01 20:09:49.117708|3|8
61|2013-04-01 20:09:49.119007|11|8
62|2013-04-01 20:09:49.120291|10|8
63|2013-04-01 20:09:49.121672|4|8
64|2013-04-01 20:09:49.123139|10|8
65|2013-04-01 20:09:49.124425|8|8
66|2013-04-01 20:09:49.125716|7|8
67|2013-04-01 20:09:49.127322|6|8
68|2013-04-01 20:09:49.128746|2|8
69|2013-04-01 20:09:49.130055|6|8
70|2013-04-01 20:09:49.131302|9|8
72|2013-04-01 20:09:49.133824|11|8
73|2013-04-01 20:09:49.135149|10|8
74|2013-04-01 20:09:49.136802|1|8
75|2013-04-01 20:09:49.138312|12|8
76|2013-04-01 20:09:50.141354|11|9
77|2013-04-01 20:09:50.145741|10|9
78|2015-09-03 19:40:12|17|4

20. Updates the name of the "Jonathan Anderson" user to be "Jon Anderson".
  update users set name = 'Jon Anderson' where name = 'Jonathan Anderson';
  select * from users;

id|created_at|name
1|2013-04-01 20:09:41.926399|Jon Rogers
2|2013-04-01 20:09:41.932863|James Gotsell
3|2013-04-01 20:09:41.934730|Erica Porter
4|2013-04-01 20:09:41.936167|Christabel Samuels
5|2013-04-01 20:09:41.937655|Dani Zraikat
6|2013-04-01 20:09:41.938977|Rane Gowan
7|2013-04-01 20:09:41.940520|Hassan Mohammadi
8|2013-04-01 20:09:41.942043|Cheryl Wee
9|2013-04-01 20:09:41.943542|Tyrone Compton
10|2013-04-01 20:09:41.945032|Filippo Matoso
11|2013-04-01 20:09:41.946512|Spencer Meyer
12|2013-04-01 20:09:41.947799|Elena Sanna
13|2013-04-01 20:09:41.949360|Gerry Mathe
14|2013-04-01 20:09:41.951026|ALex Chin
15||James White
17|2015-09-03 18:59:43|Jon Anderson

21. Deletes the user with the name "Jon Anderson".
  delete from users where name = 'Jon Anderson';
  select * from users;
id|created_at|name
1|2013-04-01 20:09:41.926399|Jon Rogers
2|2013-04-01 20:09:41.932863|James Gotsell
3|2013-04-01 20:09:41.934730|Erica Porter
4|2013-04-01 20:09:41.936167|Christabel Samuels
5|2013-04-01 20:09:41.937655|Dani Zraikat
6|2013-04-01 20:09:41.938977|Rane Gowan
7|2013-04-01 20:09:41.940520|Hassan Mohammadi
8|2013-04-01 20:09:41.942043|Cheryl Wee
9|2013-04-01 20:09:41.943542|Tyrone Compton
10|2013-04-01 20:09:41.945032|Filippo Matoso
11|2013-04-01 20:09:41.946512|Spencer Meyer
12|2013-04-01 20:09:41.947799|Elena Sanna
13|2013-04-01 20:09:41.949360|Gerry Mathe
14|2013-04-01 20:09:41.951026|ALex Chin
15||James White

22. Deletes the wishlist item for the user you just deleted.
The last question is mental.}
